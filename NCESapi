from bs4 import BeautifulSoup
import re
import os
import requests
import unittest
import sqlite3
import json

#Function to CALL THE API KEY FOR GRADE 8 MICHIGAN
def scrape_data():
    urls = {
         "math": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=mathematics&grade=8&subscale=MRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2015&StackType=RowThenCol",
        "reading": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=reading&grade=8&subscale=RRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2015&StackType=RowThenCol",
        "writing": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=writing&grade=8&subscale=WRIRP&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2007&StackType=RowThenCol",
        "science": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=science&grade=8&subscale=SRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2009&StackType=RowThenCol"
    }

    combined_data = {}

    for subject, url in urls.items():
        response = requests.get(url)
        print(response)
        if response.status_code == 200:
            data = response.json()['result']
            combined_data[subject] = data
            with open('combined_data.json', 'w') as json_file:
                json.dump(combined_data, json_file)
        else:
            print("Failed to fetch data from NCES API")
    
    with open('combined_data.json', 'w') as json_file:
        json.dump(combined_data, json_file)
    return combined_data




#Store data SQLite DATABASE
def set_up_database(data):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect('your_database.db')
    #conn = sqlite3.connect(path + "/" + data)
    cur = conn.cursor()
    return cur, conn


#Makes keys for each subject (ONLY STING CANNOT REPEAT)
def create_subject_table(cur, conn):
        subject = [
        "WRIRP", #writing
        "MRPCM", #math
        "RRPCM", #reading
        "SRPCM", #science
        ]
        cur.execute("DROP TABLE IF EXISTS subject")
        cur.execute("CREATE TABLE subject (id INTEGER PRIMARY KEY, subject_name TEXT)")
        for i in range(len(subject)):
            cur.execute("INSERT INTO subject (id,subject_name) VALUES (?,?)",(i, subject[i]))
        conn.commit()


#MAKE MAIN DATABASE --> SUBJECT(NUMBER KEY), YEAR, SCORE, GENDER(1 OR 2), RACE(1,2,3)
def create_main_table(filename, cur, conn):
    cur.execute("CREATE TABLE IF NOT EXISTS CompleteData (subject INTEGER PRIMARY KEY, year INTEGER, score INTEGER, gender INTEGER, race TEXT)")
    
    f = open(filename)
    file_data = f.read()
    f.close()
    json_data = json.loads(file_data)

    # for student in json_data:
    #     cur.execute("SELECT id FROM subject WHERE title == ?", (student["subject"],)) #HAVE A ONE COMMA SO PYTHON KNOWS ITS A TUPLE
    #     subject = cur.fetchone()[0] #get the first one
    #     cur.execute("INSERT INTO subject (subject, year, score, gender, race) VALUES (?,?,?,?,?)", 
    #                 (None, student["year"], student["value"], student["varValue"], student["varValueLabel"]))
    #     conn.commit()


#GRAPH DATA SUBJECT SCORE BY YEAR (LINE GRAPH)
        
        
#GRAPH DATA SUBJECT WRITING BY YEAR (FOR RACE 1,2,3)
        
#GRAPH DATA SUBJECT MATH BY YEAR (FOR RACE 1,2,3)
        
#GRAPH DATA SUBJECT READING BY YEAR (FOR RACE 1,2,3)
        
#GRAPH DATA SUBJECT SCIENCE BY YEAR (FOR RACE 1,2,3)
        
#GRAPH DATA SUBJECT HISTORY BY YEAR (FOR RACE 1,2,3)




class TestAllMethods(unittest.TestCase):
    def setUp(self):
        self.cur, self.conn = set_up_database("nces_api.db")
        create_subject_table(self.cur, self.conn)

    def tearDown(self):
        # Closes the database connection after each test
        self.conn.close()


    
def main():
    data = scrape_data()
    if data:
        cur, conn = set_up_database(data)
        print("Data stored successfully!")
    create_subject_table(cur, conn)
    create_main_table("combined_data.json", cur, conn)




if __name__ == "__main__":
    main()
    unittest.main(verbosity=2)