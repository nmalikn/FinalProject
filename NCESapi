import os
import requests
import unittest
import sqlite3
import json

#Function to CALL THE API KEY FOR GRADE 8 PUBLIC MICHIGAN
def scrape_data():
    urls = {
        "math": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=mathematics&grade=8&subscale=MRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2015&StackType=RowThenCol",
        "math2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=mathematics&grade=8&subscale=MRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2017&StackType=RowThenCol",
        "math3": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=mathematics&grade=8&subscale=MRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2022&StackType=RowThenCol",
        "reading": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=reading&grade=8&subscale=RRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2015&StackType=RowThenCol",
        "reading2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=reading&grade=8&subscale=RRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2017&StackType=RowThenCol",
        "writing": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=writing&grade=8&subscale=WRIRP&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2007&StackType=RowThenCol",
        "writing2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=writing&grade=8&subscale=WRIRP&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2002&StackType=RowThenCol",
        "science": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=science&grade=8&subscale=SRPUV&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2015&StackType=RowThenCol",
        "science2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=science&grade=8&subscale=SRPUV&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2011&StackType=RowThenCol",
        "civics": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=civics&grade=8&subscale=CIVRP&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2022&StackType=RowThenCol",
        "civics2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=civics&grade=8&subscale=CIVRP&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2018&StackType=RowThenCol",
        "geo": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=geography&grade=8&subscale=GRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2018&StackType=RowThenCol",
        "geo2": "https://www.nationsreportcard.gov/Dataservice/GetAdhocData.aspx?type=data&subject=geography&grade=8&subscale=GRPCM&variable=SDRACE%2BGENDER&categoryindex=2%2B1,2%2B2,3%2B1,3%2B2&jurisdiction=NP,MI&stattype=MN%3AMN&Year=2014&StackType=RowThenCol",
    }

    combined_data = {}

    for subject, url in urls.items():
        response = requests.get(url)
        print(response)
        if response.status_code == 200:
            data = response.json()['result']
            combined_data[subject] = data
            with open('combined_data.json', 'w') as json_file:
                json.dump(combined_data, json_file)
        else:
            print("Failed to fetch data from NCES API")
    
    
    #NEED TO SAVE WITHIN THE CORRECT FOLDER
    script_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(script_dir)
    final_project_dir = os.path.join(parent_dir, "FinalProject")
    json_file_path = os.path.join(final_project_dir, 'combined_data.json')
    
    with open(json_file_path, 'w') as json_file:
        json.dump(combined_data, json_file)

    combined_data = rewrite_json_data(combined_data)
    return combined_data

#turn JSON into a Dictionary
def rewrite_json_data(combined_data):
    new_dict = {}
    id = 0
    subject_id = 0
    for subject, students in combined_data.items():
        for item in students:
            scale = item["scale"]
            year = item["year"]
            varValueLabel = item["varValueLabel"]
            value = item["value"] 

            if varValueLabel not in new_dict:
                new_dict[varValueLabel] = {"gender_race_id": len(new_dict) + 1, "data": []}
            gender_race_id = new_dict[varValueLabel]["gender_race_id"]

            key = (subject_id, scale, year, value, gender_race_id)
            if key not in new_dict:
                new_dict[key] = []
            new_dict[key].append(id)
            id += 1
        subject_id += 1
    #print(new_dict)
    return new_dict


#Store data SQLite DATABASE
def set_up_database(data):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect('FinalProject.db')
    cur = conn.cursor()
    return cur, conn
    

#Make keys for each race and gender (STRING CANNOT REPEAT)
def create_gender_race_table(data, cur, conn):
    gender_race_id = [
        "White+Male",
        "Black+Male",
        "Hispanic+Male",
        "White+Female",
        "Black+Female",
        "Hispanic+Female",
        ]
    cur.execute("DROP TABLE IF EXISTS gender_race_id")
    cur.execute("CREATE TABLE gender_race_id (id INTEGER PRIMARY KEY, gender_race TEXT)")
    for i in range(len(gender_race_id)):
        cur.execute("INSERT INTO gender_race_id (id,gender_race) VALUES (?,?)",(i, gender_race_id[i]))
    conn.commit()


#MAKE MAIN DATABASE --> SUBJECT(NUMBER KEY), YEAR, SCORE, GENDER/RACE
def create_main_table(filename, cur, conn):
    cur.execute("CREATE TABLE IF NOT EXISTS CompleteData (id INTEGER PRIMARY KEY, subject_id INTEGER, year INTEGER, score DEC, gender_race_id INTEGER)")

    f = open(filename)
    file_data = f.read()
    f.close()
    json_data = json.loads(file_data)

    new_data = rewrite_json_data(json_data)
    print(new_data)
    id_count = 0
    temp = 0
    
    while temp < 100:
        for i in range(temp, temp + 25):
            if i < len(new_data):
                student, ids = list(new_data.items())[i]

                for id in ids:
                    if isinstance(id, int): #this SHOULD have only kept the int but there are still letters showing up and I don't know how
                        print(f'ID IS HERE {id}')
                        subject_id = student[0]
                        year = student[2]
                        value = student[3]
                        gender_race_id = student[4]

                        cur.execute("INSERT OR IGNORE INTO CompleteData (id, subject_id, year, score, gender_race_id) VALUES (?,?,?,?,?)", 
                                    (id_count, subject_id, year, value, gender_race_id))
                        
                        id_count += 1
            temp += 25
            conn.commit()
            


class TestAllMethods(unittest.TestCase):
    def setUp(self):
        self.cur, self.conn = set_up_database("nces_api.db")
        create_gender_race_table("combined_data.json", self.cur, self.conn)
        create_main_table("combined_data.json", self.cur, self.conn)

    def tearDown(self):
        # Closes the database connection after each test
        self.conn.close()

 
def main():
    data = scrape_data()
    if data:
        cur, conn = set_up_database(data)
        print("Data stored successfully!")
    create_gender_race_table("combined_data.json", cur, conn)
    create_main_table("combined_data.json", cur, conn)


if __name__ == "__main__":
    main()
    unittest.main(verbosity=2)