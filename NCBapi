from bs4 import BeautifulSoup
import re
import os
import requests
import unittest
import sqlite3
import json

#Important Links to work on this code
#https://api.census.gov/data/2022/acs/acs1/profile.html
#https://www.census.gov/library/video/2020/using-api-results-for-multiple-estimates.html


API_key = "e8128ade33840f3a6e329355e63ee69cae8d5dd3"
parameters = {"key": API_key}
query_url = "https://api.census.gov/data/2022/acs/acs1/profile"

#We will use this url to specify variables (after get=) for Michigan using counties as our measuring point
testing_url = "https://api.census.gov/data/2022/acs/acs1/profile?get=NAME,DP02_0001E,DP03_0128PE&for=congressional%20district:*&in=state:26"
total_population = "DP02_0001E"
families_under_10k = "DP03_0076E"
families_10k_to_14999 = "DP03_0077E"
families_15k_to_24999 = "DP03_0078E"
total_pop_under18 = "DP05_0019E"
pop_percent_white = "DP05_0037PE"
pop_percent_black = "DP05_0038PE"
pop_percent_asian = "DP05_0044PE"
poverty_percent = "DP03_0128PE"

cities_breakdown = "county%20subdivision:*&in=state:26"
county_breakdown = "county:*&in=state:*"
#Function to CALL THE API KEY
def scrape_data_cities():
    url = f'{query_url}?get=NAME,{total_population},{pop_percent_white},{pop_percent_black},{poverty_percent}&for={cities_breakdown}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        print (data)
        return data
    else:
        print ("Could not access Census data")
        return None

#print (scrape_data_cities())

def scrape_data_counties():
    url = f"{query_url}?get=NAME,{total_population},{pop_percent_white},{pop_percent_black},{poverty_percent}&for={county_breakdown}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        #print (data)
        return data
    else:
        print ("Could not access county data")
        return None
    
def scrape_state_names():
    url = "https://api.census.gov/data/2022/acs/acs1/profile?get=NAME&for=state:*" 
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        #print (data)
        return data
    print ("Could not get State data")
    return None


def set_up_database(data_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path + "/" + data_name)
    return conn
        

def make_state_table(state_names, cur, conn):
    cur.execute('''CREATE TABLE IF NOT EXISTS US_states (id INTEGER PRIMARY KEY, name TEXT UNIQUE)''')
    id_count = 0
    for state in state_names:
        if state_names.index(state) != 0:
            state = state[0]
            cur.execute('''INSERT OR IGNORE INTO US_states (id, name) VALUES (?,?)''', (id_count, state))
            id_count += 1

    conn.commit()


def make_county_table(county_data, cur, conn):
    cur.execute('''CREATE TABLE IF NOT EXISTS US_counties (id INTEGER PRIMARY KEY, Name TEXT UNIQUE )''')
    id_count = 0
    for item in county_data:
        if county_data.index(item) != 0:
        
            county = item[0].split(",")[0]
            cur.execute('''INSERT OR IGNORE INTO US_counties (id, Name) VALUES (?,?)''', (id_count, county))
            id_count += 1

    conn.commit()

def make_main_table(cur, conn):
    cur.execute('''CREATE TABLE IF NOT EXISTS US_Demographic_Info (id INTEGER PRIMARY KEY, county_id INTEGER, state_id INTEGER,
                population INTEGER, white_population_percentage INTEGER, black_population_percentage INTEGER, poverty_percentage INTEGER)''')
    conn.commit()


def add_main_data(county_data, cur, conn):
    # set up id_counts and delete first index in data (which gave the variable names)
    county_data.pop(0)
    cur.execute('''SELECT COUNT(id) FROM US_Demographic_Info''')
    id_count = int(cur.fetchone()[0])
    if id_count == 848:
        print ("All data has been added! Congrats for not getting carpal tunnel syndrome!")
        return None
    if id_count + 25 > len(county_data):
        end_count = len(county_data)
    else:
        end_count = id_count + 25
    
    
    #add counties to the table: 
    while id_count < end_count:
        item = county_data[id_count]
        county = item[0].split(",")[0].strip()
        cur.execute('''SELECT id FROM US_counties WHERE Name = ?''', (county,))
        county_id = int(cur.fetchone()[0])
        state = item[0].split(",")[-1].strip()
        cur.execute('''SELECT id FROM US_states WHERE name = ?''', (state,))
        state_id = int(cur.fetchone()[0])
        if item[1] == None:
            population = "NULL"
        else:
            population = int(item[1])
        white_percentage = float(item[2])
        black_percentage = float(item[3])
        poverty_percentage = float(item[4])
        cur.execute('''INSERT INTO US_Demographic_Info (id, county_id, state_id, population, white_population_percentage,
                    black_population_percentage, poverty_percentage) VALUES (?,?,?,?,?,?,?)''', (id_count, county_id, state_id, population, 
                                                                                                white_percentage, black_percentage, poverty_percentage))
        id_count += 1
        
    conn.commit()








def main():
    county_data = scrape_data_counties()
    state_data = scrape_state_names()
    if county_data:
        conn = set_up_database("FinalProject.db")
        cur = conn.cursor()
        print("Data stored successfully!")
        make_county_table(county_data, cur, conn)
        make_state_table(state_data, cur, conn)
        make_main_table(cur, conn)
        add_main_data(county_data, cur, conn)


if __name__ == "__main__":
    main()
    unittest.main(verbosity=2)