from bs4 import BeautifulSoup
import re
import os
import requests
import unittest
import sqlite3
import json

# For calculations about poverty percentage, we will assign the following variable to 11.5, which is the national poverty rate in the United States
national_poverty_rate = 11.5

# This file will be used to pull our data from the database and make calculations based on our findings. We will store our calculations
# in dictionaries and dump them into a json file. From there, we will load the json file and make visualizations based on the data.
def access_table(db_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path + "/" + db_name)
    return conn

def get_michigan_data(cur, conn):
    cur.execute('''SELECT id FROM US_states WHERE name = 'Michigan' ''')
    id = int(cur.fetchone()[0])
    
    cur.execute('''SELECT US_counties.Name, US_Demographic_Info.population, US_Demographic_Info.white_population_percentage, 
                US_Demographic_Info.black_population_percentage, US_Demographic_Info.poverty_percentage
                FROM US_Demographic_Info JOIN US_counties ON US_Demographic_Info.county_id = US_counties.id WHERE state_id = ?''', (id,))
    michigan_data = cur.fetchall()

    county_name_list = []
    for county in michigan_data:
        county_name_list.append(county[0])

    michigan_data_dict = {}
    for county in county_name_list:
        michigan_data_dict[county] = {}
    for i in range(len(county_name_list)):
        population = michigan_data[i][1]
        white_population = michigan_data[i][2]
        black_population = michigan_data[i][3]
        poverty_percentage = michigan_data[i][4]

        michigan_data_dict[county_name_list[i]]["population"] = population
        michigan_data_dict[county_name_list[i]]["white percentage"] = white_population
        michigan_data_dict[county_name_list[i]]["black percentage"] = black_population
        michigan_data_dict[county_name_list[i]]["poverty percentage"] = poverty_percentage

    return michigan_data_dict

# Put the full dictionary of Michigan specific data into a JSON file
def make_json(data, filename):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(script_dir)
    final_project_dir = os.path.join(parent_dir, "FinalProject")
    json_file_path = os.path.join(final_project_dir, filename)

    with open (json_file_path, "w") as my_file:
        json.dump(data, my_file, indent = 4)




# Get all counties with a higher percentage of white and black population and find the poverty rates for each. Then, find the average poverty rate and 
# determine if this is above or below the national/State of Michigan average. We will make a visualization using this data of a scatterplot to find correlations
def get_highest_poverty_rates(cur, conn):
    cur.execute('''SELECT id FROM US_states WHERE name = 'Michigan' ''')
    id = int(cur.fetchone()[0])

    cur.execute('''SELECT US_counties.Name, US_Demographic_Info.population, US_Demographic_Info.white_population_percentage, 
                US_Demographic_Info.black_population_percentage, US_Demographic_Info.poverty_percentage
                FROM US_Demographic_Info JOIN US_counties ON US_Demographic_Info.county_id
                = US_counties.id WHERE state_id = ? AND poverty_percentage > ?''', (id, national_poverty_rate))
    highest_poverty_rate = cur.fetchall()

    poverty_data_dict = {}

    for item in highest_poverty_rate:
        county_name = item[0]

        poverty_data_dict[county_name] = {}
        population = item[1]
        white_percentage = item[2]
        black_percentage = item[3]
        poverty_rate = item[4]

        poverty_data_dict[county_name]["Population"] = population
        poverty_data_dict[county_name]["White Percentage"] = white_percentage
        poverty_data_dict[county_name]["Black Percentage"] = black_percentage
        poverty_data_dict[county_name]["Poverty Rate"] = poverty_rate 
    

    

    return poverty_data_dict

#Add average poverty rate in Michigan
def average_poverty_rate(cur, conn):
    cur.execute('''SELECT id FROM US_states WHERE name = 'Michigan' ''')
    id = int(cur.fetchone()[0])

    cur.execute('''SELECT US_counties.Name, US_Demographic_Info.population, US_Demographic_Info.white_population_percentage, 
                US_Demographic_Info.black_population_percentage, US_Demographic_Info.poverty_percentage
                FROM US_Demographic_Info JOIN US_counties ON US_Demographic_Info.county_id
                = US_counties.id WHERE state_id = ?''', (id,))
    MI_counties = cur.fetchall()
    total = 0
    for item in MI_counties:
        total += float(item[4])
    average = round(total / len(MI_counties), 1)

    return_dict = {"Average Poverty Rate of Michigan Counties": average, "National Average Poverty Rate": national_poverty_rate}
    return return_dict



#This function will pull the year, michigan per capita personal income, and the national per capita personal income to create a 
#line graph of each point over the years

def get_per_capita_income_data (cur, conn):
    cur.execute('''SELECT year, michigan_percapita_income, national_percapita_income FROM MI_PerCapita_PersonalIncome ''')
    percapita_data = cur.fetchall()

    per_capita_dict = {}
    for item in percapita_data:
        year = int(item[0])
        per_capita_dict[year] = {}
        michigan_income = item[1]
        national_income = item[2]

        per_capita_dict[year]["Michigan Per Capita Income"] = michigan_income
        per_capita_dict[year]["National Per Capita Income"] = national_income

    return  per_capita_dict


#Difference in Per Capita Incomes

def get_difference_in_incomes(cur, conn):
    cur.execute('''SELECT year, michigan_percapita_income, national_percapita_income FROM MI_PerCapita_PersonalIncome ''')
    percapita_data = cur.fetchall()

    per_capita_differences = {}
    for item in percapita_data:
        year = int(item[0])
        per_capita_differences[year] = {}
        michigan_income = int(item[1])
        national_income = int(item[2])

        difference = michigan_income - national_income
        per_capita_differences[year]["Difference in Michigan and National Per Capita Income"] = difference
    return per_capita_differences

#We should pull our data from NCES to determine if there is a correlation between lower test scores and racial or gender categories. If there is, we can 
# make conclusions about whether this is because of any greater or lesser risk of poverty.

def parse_NCES_data(cur, conn):
    cur.execute('''SELECT NCESdata.year, NCESdata.score, gender_race_id.gender_race FROM NCESdata JOIN gender_race_id ON 
                NCESdata.gender_race_id = gender_race_id.id WHERE score != 999  ''')
    NCESdata = cur.fetchall()

    data_dict = {}
    for student in NCESdata:
        if student[-1] not in data_dict:
            data_dict[student[-1]] = []
        else:
            data_dict[student[-1]].append(student[1])


    average_dict = {}
    for race_gender in data_dict:
        length = len(data_dict[race_gender])
        total = sum(data_dict[race_gender])
        average = total / length

        if race_gender not in average_dict:
            average_dict[race_gender] = {"Average Score": average}

    return average_dict
        


def main():
    conn = access_table("FinalProject.db")
    cur = conn.cursor()

    #get all of the data
    michigan_data = get_michigan_data(cur, conn)
    MI_poverty_data = get_highest_poverty_rates(cur, conn)
    percapitadata = get_per_capita_income_data(cur, conn)
    NCES_average_score = parse_NCES_data(cur, conn)
    average_MI_poverty_rate = average_poverty_rate(cur, conn)
    difference_in_percapita_incomes = get_difference_in_incomes(cur, conn)

    #load all of the data into separate json files
    make_json(michigan_data, "michigan_census_data.json")
    make_json(MI_poverty_data, "michigan_poverty_rates.json")
    make_json(percapitadata, "per_capita_data.json")
    make_json(NCES_average_score, "NCES_average_scores_by_race_gender.json")
    make_json(average_MI_poverty_rate, "average_poverty_rate_MI_counties.json")
    make_json(difference_in_percapita_incomes, "difference_in_per_capita_income.json")

if __name__ == "__main__":
    main()


